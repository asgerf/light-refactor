#!/usr/bin/env node

var program = require('commander')
var cols = require('./cols/cols')

program
    .option('-n, --num-questions <NUM>', 'Number of questions [3]', Number, 3)
    .option('--delta <FILE>', 'Compare to other namestats.txt')
    .option('--sort <KEY>', 'Sort by: baseline improvement')
    .parse(process.argv)

if (program.args.length !== 1) {
    console.error("Please pass exactly one filename as argument");
    process.exit(1);
}

var N = program.numQuestions

function div(x,y) {
    if (y == 0)
        return 0;
    else
        return x/y;
}

// Determine sorting function
var sortKey;
function makeSortKey() {
    program.sort = program.sort || "baseline";
    switch (program.sort) {
        case 'improvement':
            return function() { return div(this.rename - this.searchReplace, this.numPrtys - this.searchReplace) }
        case 'total':
            return function() { return div(this.rename2 - this.searchReplace, this.numPrtys - this.searchReplace) }
        case 'baseline':
            return function() { return div(this.searchReplace, this.numPrtys) }
        default:
            console.error("Invalid sort key: " + program.sort)
            return process.exit(1)
    }
}
sortKey = makeSortKey();

// Loads statistics from the given namestats.txt file, on form {bench, numPrtys, searchReplace, rename}
function load(file) {
    return cols
        .file(file)
        .columns('bench', null, 'searchReplace', 'rename')
        .map({
            searchReplace: Number,
            rename: Number
        })
        .group('bench', {
            searchReplace: function(xs) { return xs.filter(function(x) {return x <= N}).length },
            rename: function(xs) { return xs.filter(function(x) {return x <= N}).length },
            numPrtys: function() { return this.bench.length }
        });
}


var data = load(program.args[0])

if (program.delta) {
    data = load(program.delta)
        .map({
            searchReplace: null,
            rename: null,
            numPrtys: null,
            rename2: function() { return this.rename }
        })
        .join(data);

    data.sort(sortKey)
        .print('bench', 'numPrtys', 'searchReplace', 'rename', 'rename2')
        .printErrors()
} else {
    data.sort(sortKey)
        .print('bench', 'numPrtys', 'searchReplace', 'rename')
        .printErrors()
}
/*

var current =
cols.files(program.args)
    .columns('bench', null, 'searchReplace', 'rename')
    .map({
        searchReplace: Number,
        rename: Number
    })
    .group('bench', {
        searchReplace: function(xs) { return xs.filter(function(x) {return x <= N}).length },
        rename: function(xs) { return xs.filter(function(x) {return x <= N}).length },
        numPrtys: function() { return this.bench.length }
    });

if (program.delta) {
    cols.file(program.delta)
        .columns('bench', null, null, 'rename')
        .map({
            rename: Number
        })
        .group('bench', {
            rename: function(xs) { return xs.filter(function(x) {return x <= N}).length },
        })
        .map({
            rename2: function() { return this.rename },
            rename: null
        })
        .join(current)
        // .map({ // deltas
        //     rename2: function() { return this.rename2 - this.rename },
        //     rename: function() { return this.rename - this.searchReplace; },
        //     neither: function() { return this.numPrtys - this.rename2 }
        // })
        // .map({ // normalize
        //     rename2: function(x) { return x / this.numPrtys; },
        //     rename: function(x) { return x / this.numPrtys; },
        //     searchReplace: function(x) { return x / this.numPrtys },
        //     neither: function(x) { return x / this.numPrtys }
        // })
        .sort('searchReplace')
        .print('bench', 'numPrtys', 'searchReplace', 'rename', 'rename2')
        .printErrors()
} else {
    current
        // .map({ // deltas
        //     rename: function() { return this.rename - this.searchReplace; },
        //     neither: function() { return this.numPrtys - this.rename }
        // })
        // .map({ // normalize
        //     rename: function(x) { return x / this.numPrtys; },
        //     searchReplace: function(x) { return x / this.numPrtys },
        //     neither: function(x) { return x / this.numPrtys }
        // })
        .sort('searchReplace')
        .print('bench', 'numPrtys', 'searchReplace', 'rename')
        .printErrors()
}
    

*/